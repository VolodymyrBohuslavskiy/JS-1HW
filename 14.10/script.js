/*
 let tag_a =
 {
 name: '\<a>',
 action: '\Тег\<a> является одним из важных элементов HTML и предназначен для создания ссылок.',
 attributes: {
 accesskey: 'Активация ссылки с помощью комбинации клавиш.',
 coords: 'Устанавливает координаты активной области',
 download: 'Предлагает скачать указанный по ссылке файл.'
 }
 }
 ;
 let tag_div =
 {
 name: '\<div>',
 action: '\Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого.',
 attributes: {
 align: 'Задает выравнивание содержимого тега \<div>.',
 title: 'Добавляет всплывающую подсказку к содержимому.'
 }
 }
 ;
 let tag_h1 =
 {
 name: '\<h1>',
 action: '\Тег \<h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным.',
 attributes: {
 align: 'Определяет выравнивание заголовка.',
 title: 'Добавляет всплывающую подсказку к содержимому.'
 }
 }
 ;
 let tag_span =
 {
 name: '\<span>',
 action: '\Тег <span> предназначен для определения строчных элементов документа.',
 attributes: {
 accesskey: 'Позволяет получить доступ к элементу с помощью заданного сочетания клавиш.',
 class: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением'
 }
 }
 ;
 let tag_input =
 {
 name: '\<input>',
 action: '\Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем.',
 attributes: {
 accept: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.',
 alt: 'Альтернативный текст для кнопки с изображением.'
 }
 }
 ;

 let tag_from =
 {
 name: '\<form>',
 action: '\Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.',
 attributes: {
 accept_charset: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.',
 action: 'Адрес программы или документа, который обрабатывает данные формы.'
 }
 }
 ;

 let tag_option =
 {
 name: '\<option>',
 action: '\Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. ',
 attributes: {
 disabled: 'Заблокировать для доступа элемент списка.',
 label: 'Указание метки пункта списка. ',
 selected: 'Заранее устанавливает определенный пункт списка выделенным. '
 }
 }
 ;
 let tag_select =
 {
 name: '\<select>',
 action: '\Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее.',
 attributes: {
 accesskey: 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.',
 autofocus: 'Устанавливает, что список получает фокус после загрузки страницы.',
 disabled: 'Блокирует доступ и изменение элемента.'
 }
 }
 ;
 console.log(tag_a, tag_div, tag_h1, tag_span, tag_input, tag_from, tag_option, tag_select);*/

function Cars(brand, model, year, status) {
    this.brand = brand;
    this.model = model;
    this.year = year;
    this.status = status;
    /**
     * @return {string}
     */
    this.Drive = function () {
        return `This car is ${this.brand} ${this.model} of ${this.year} year, car on ${this.status} status. `
    }
}
let Car_1 = new Cars('Audi', "A7", 2013, true);

let car_1json=JSON.stringify(Car_1);
console.log(car_1json);

let car_1parse = JSON.parse(car_1json);
console.log(car_1parse);

let Car_2 = new Cars('Ford', "Raptor", 2017, true);
console.log(Car_2.Drive());